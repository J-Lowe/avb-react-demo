{"version":3,"sources":["components/ContactForm.module.css","components/ContactList.tsx","components/Email.tsx","components/ContactForm.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/ContactList.module.css"],"names":["module","exports","ContactList","prop","contactPage","contacts","sort","a","b","firstName","localeCompare","className","onClick","setSelectedContact","id","lastName","emails","map","contact","classes","jbtn","selectedContactId","selected","Email","useState","showDelete","setShowDelete","onMouseEnter","onMouseLeave","email","removeEmail","ContactForm","useForm","register","setValue","getValues","handleSubmit","formState","errors","showInput","setShowInput","updateEmailList","setUpdateEmailList","index","indexOf","splice","hasChange","htmlFor","type","input","document","getElementById","push","value","contactFooter","fetch","method","then","setUpdateList","response","json","data","headers","body","JSON","stringify","App","setIsLoading","contactList","setContactList","undefined","selectedContact","updateList","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6e41d006.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactNameDiv\":\"ContactForm_contactNameDiv__3zjtl\",\"contactFooter\":\"ContactForm_contactFooter__yvvUe\",\"contactFooterLeft\":\"ContactForm_contactFooterLeft__luQjW\",\"contactFooterRight\":\"ContactForm_contactFooterRight__63eYt\"};","import classes from \"./ContactList.module.css\";\nimport { ContactPage } from \"../interfaces/ContactPage\";\nimport { Contact } from \"../interfaces/Contact\";\n\nexport declare interface ContactListProp {\n  contactPage?: ContactPage;\n  setSelectedContact: Function;\n  selectedContactId?: number;\n}\n\nfunction ContactList(prop: ContactListProp) {\n  prop.contactPage?.contacts.sort((a: any, b: any) => a.firstName?.localeCompare(b.firstName));\n  return (\n    <div className=\"contactListDiv lightBackground\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>Contacts</h2>\n        </div>\n        <div className=\"col-1\">\n          <button className={\"btn addBtn moveLeft\"} onClick={() => prop.setSelectedContact({\n            id: null,\n            firstName: \"\",\n            lastName: \"\",\n            emails: []})\n          }>+</button>\n        </div>\n      </div>\n      <div className=\"row contactList\">\n        <div className=\"col\">\n          {prop.contactPage?.contacts.map((contact) => {\n            return (\n              <p>\n                <div className={\"btn \" + classes.jbtn + (contact.id == prop.selectedContactId ? \" \" + classes.selected : \"\")}\n                  onClick={() => {\n                    prop.setSelectedContact(contact);\n                  }}\n                >\n                  {contact.firstName} {contact.lastName}\n                </div>\n              </p>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ContactList;\n","import { useState } from \"react\";\n\nexport declare interface EmailProp {\n  email?: string;\n  removeEmail: Function;\n}\n\nfunction Email(prop: EmailProp) {\n  const [showDelete, setShowDelete] = useState(false);\n\n  return (\n    <p>\n      <span\n        onMouseEnter={() => setShowDelete(true)}\n        onMouseLeave={() => setShowDelete(false)}\n      >\n        {prop.email}{\" \"}\n        {showDelete && (\n          <button onClick={() => prop.removeEmail(prop.email)}>-</button>\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default Email;\n","import { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Contact } from \"../interfaces/Contact\";\nimport classes from \"./ContactForm.module.css\";\nimport Email from \"./Email\";\nimport NameInput from \"./NameInput\";\n\ndeclare interface ContactFormProp {\n  contact: Contact;\n  setUpdateList: Function;\n  setSelectedContact: Function;\n}\n\ntype FormData = {\n  firstName: string;\n  lastName: string;\n};\n\nfunction ContactForm(prop: ContactFormProp) {\n  const { register, setValue, handleSubmit, formState: { errors }, getValues } = useForm<FormData>();\n  const [showInput, setShowInput] = useState(false);\n  const [updateEmailList, setUpdateEmailList] = useState(false);\n\n  function removeEmail(email: string) {\n    var index = prop.contact.emails.indexOf(email);\n    prop.contact.emails.splice(index, 1);\n    prop.contact.hasChange = true;\n    setUpdateEmailList(true);\n  }\n  \n  if(updateEmailList) {\n    setUpdateEmailList(false);\n  }\n\n  setValue(\"firstName\", \"\" + prop.contact.firstName);\n  setValue(\"lastName\", \"\" + prop.contact.lastName);\n\n  return (\n    <div className=\"padMe\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <label htmlFor=\"firstName\">First Name</label>\n          <br />\n          <input className=\"lightBackground\" {...register(\"firstName\")} />\n        </div>\n        <div className=\"col\">\n          <label htmlFor=\"lastName\">Last Name</label>\n          <br />\n          <input className=\"lightBackground\" {...register(\"lastName\")} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <label htmlFor=\"email\">Email</label>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          {prop.contact.emails.map((email) => {\n            return <Email email={email} removeEmail={removeEmail} />;\n          })}\n          {showInput && \n          <div>\n            <input type=\"text\" id=\"newEmail\"/>\n            <button className=\"btn footerBtn btn-success\" onClick={() => {\n              var input = document.getElementById(\"newEmail\") as HTMLInputElement;\n              prop.contact.emails.push(input.value);\n              prop.contact.hasChange = true;\n              setShowInput(false);\n              setUpdateEmailList(true);\n            }}>Add</button>\n            <button className=\"btn footerBtn\" onClick={() => setShowInput(false)}>Cancel</button>\n          </div>}\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <button className={\"btn addBtn\"} onClick={() => setShowInput(true)}>+</button><span className={\"addEmail\"}> add email</span>\n        </div>\n      </div>\n      <div className={classes.contactFooter + \" row\"}>\n        <div className=\"col\">\n          <button className=\"btn btn-danger\" onClick={() => {\n            if (prop.contact && prop.contact.id) {\n              fetch(\"https://avb-contacts-api.herokuapp.com/contacts/\" + prop.contact.id, {\n                method: 'DELETE'\n              }).then(() => prop.setUpdateList(true));\n            }\n          }}>Delete</button>\n        </div>\n        <div className=\"col footer\">\n          <button className=\"btn\" onClick={() => {\n            fetch(\"https://avb-contacts-api.herokuapp.com/contacts/\" + prop.contact.id).then(response => {return response.json()}).then(data => {\n              setValue(\"firstName\", \"\" + data.firstName);\n              setValue(\"lastName\", \"\" + data.lastName);\n              prop.contact.emails = data.emails;\n              prop.contact.hasChange = false;\n              setUpdateEmailList(true);\n            });\n          }}>Cancel</button>\n          <button className=\"btn btn-primary footerBtn\" onClick={() => {\n            if (getValues(\"firstName\") && getValues(\"lastName\")) {\n              if (prop.contact && prop.contact.id) {\n                prop.contact.firstName = getValues(\"firstName\");\n                prop.contact.lastName = getValues(\"lastName\");\n                fetch(\"https://avb-contacts-api.herokuapp.com/contacts/\" + prop.contact.id, {\n                  method: 'PUT',\n                  headers: {\n                    'Content-type': 'application/json'\n                  },\n                  body: JSON.stringify(prop.contact)\n                }).then(() => prop.setUpdateList(true));\n              } else {\n                prop.contact.firstName = getValues(\"firstName\");\n                prop.contact.lastName = getValues(\"lastName\");\n                fetch(\"https://avb-contacts-api.herokuapp.com/contacts/\", {\n                  method: 'POST',\n                  headers: {\n                    'Content-type': 'application/json'\n                  },\n                  body: JSON.stringify(prop.contact)\n                }).then(() => prop.setUpdateList(true));\n              }\n            }\n          }}>Save</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ContactForm;\n","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ContactList, { ContactListProp } from './components/ContactList';\nimport ContactForm from './components/ContactForm';\nimport { ContactPage } from './interfaces/ContactPage';\nimport { Contact } from './interfaces/Contact';\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [contactList, setContactList] = useState<ContactPage>();\n  const [selectedContact, setSelectedContact] = useState<Contact>({\n    id: undefined,\n    firstName: \"\",\n    lastName: \"\",\n    emails: [],\n    hasChange: false,\n  });\n  const [updateList, setUpdateList] = useState(true);\n\n  useEffect(() => {\n    if (updateList) {\n      fetch(\"https://avb-contacts-api.herokuapp.com/contacts/paginated\").then(response => {return response.json()}).then(data => {\n        setIsLoading(false);\n        setContactList(data);\n        setUpdateList(false);\n      });\n    }\n  }, [updateList]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-3\">\n          <ContactList contactPage={contactList} setSelectedContact={setSelectedContact} selectedContactId={selectedContact.id}/>\n        </div>\n        <div className=\"col\">\n          <ContactForm contact={selectedContact} setUpdateList={setUpdateList} setSelectedContact={setSelectedContact} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactDiv\":\"ContactList_contactDiv__nnHpU\",\"addContactButton\":\"ContactList_addContactButton__1-z21\",\"contactsHeader\":\"ContactList_contactsHeader__321kx\",\"jbtn\":\"ContactList_jbtn__nLJmw\",\"selected\":\"ContactList_selected__1ONAF\"};"],"sourceRoot":""}